--- CODE DU PROJET - GENERE LE 20/07/2025 A 19:45:02,04 --- 
 
 
======================================================= 
FICHIER : config.py 
======================================================= 
 
# config.py
import os
import platform

# Chemin de la racine du projet
basedir = os.path.abspath(os.path.dirname(__file__))

def find_libreoffice_path():
    """Tente de trouver le chemin de l'exécutable de LibreOffice."""
    system = platform.system()
    if system == "Windows":
        return "C:\\Program Files\\LibreOffice\\program\\soffice.exe"
    elif system == "Darwin": # macOS
        return "/Applications/LibreOffice.app/Contents/MacOS/soffice"
    elif system == "Linux":
        return "/usr/bin/libreoffice"
    return None

class Config:
    # --- Clé secrète et Identifiants ---
    # Pour la production, définissez ces variables dans votre environnement !
    # Exemple : export SECRET_KEY='une-vraie-cle-secrete-tres-longue'
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'session_impression_finale_2025_admin_super_secret'
    ADMIN_USERNAME = os.environ.get('ADMIN_USERNAME') or 'admin'
    ADMIN_PASSWORD = os.environ.get('ADMIN_PASSWORD') or '4187'
    TASK_PROCESSING_TIMEOUT = 30 # en secondes

    # --- Configuration de l'impression ---
    PRINTER_IP = os.environ.get('PRINTER_IP') or '192.168.1.18:8000'
    PRIX_NOIR_BLANC = 0.20
    PRIX_COULEUR = 0.70

    # --- Chemins des fichiers et dossiers ---
    UPLOAD_FOLDER = os.path.join(basedir, 'uploads')
    CONVERTED_FOLDER = os.path.join(UPLOAD_FOLDER, 'converted')
    DATABASE_FILE = os.path.join(basedir, 'history.db')

    # --- Dépendances externes ---
    LIBREOFFICE_PATH = os.environ.get('LIBREOFFICE_PATH') or find_libreoffice_path()

    # --- URL de l'imprimante ---
    URL_PDF_PRINT = f"http://{PRINTER_IP}/direct"
 
 
 
======================================================= 
FICHIER : print_server.py 
======================================================= 
 
# print_server.py
import os
import time
import sys
import subprocess
import shutil
from datetime import datetime, timedelta
import pathlib
from collections import OrderedDict
import threading
import uuid
import sqlite3
import logging
import traceback
from multiprocessing import Process, Queue

import click
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service as ChromeService
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.ui import Select
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from flask import Flask, render_template, request, redirect, url_for, session, jsonify, send_from_directory, g
from PyPDF2 import PdfReader, errors as PyPDF2Errors
from werkzeug.utils import secure_filename

from config import Config
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
app = Flask(__name__)
app.config.from_object(Config)

STATUS = {
    'UPLOADING': 'TELECHARGEMENT_EN_COURS', 'QUEUED': 'EN_ATTENTE_TRAITEMENT',
    'CONVERTING': 'CONVERSION_EN_COURS', 'COUNTING': 'COMPTAGE_PAGES',
    'ERROR_FILE_EMPTY': 'ERREUR_FICHIER_VIDE',
    'ERROR_CONVERSION': 'ERREUR_CONVERSION',
    'ERROR_PAGE_COUNT': 'ERREUR_COMPTAGE_PAGES',
    'ERROR_FATAL_READ': 'ERREUR_LECTURE_FATALE',
    'READY': 'PRET_POUR_CALCUL',
    'READY_NO_PAGE_COUNT': 'PRET_SANS_COMPTAGE',
    'PRINTING': 'IMPRESSION_EN_COURS',
    'PRINT_SUCCESS': 'IMPRIME_AVEC_SUCCES',
    'PRINT_SUCCESS_NO_COUNT': 'IMPRIME_SANS_COMPTAGE',
    'PRINT_FAILED': 'ERREUR_IMPRESSION'
}
ALLOWED_EXTENSIONS = {'pdf', 'png', 'jpg', 'jpeg', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'odt', 'ods'}


def get_db_connection():
    conn = sqlite3.connect(app.config['DATABASE_FILE'], timeout=10)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with get_db_connection() as conn:
        with app.open_resource('schema.sql', mode='r') as f:
            conn.cursor().executescript(f.read())
        conn.commit()
    logging.info("Base de données initialisée avec le schéma.")

def db_update_task(task_id, data):
    with get_db_connection() as conn:
        fields = ', '.join([f'{key} = ?' for key in data.keys()])
        values = list(data.values()) + [task_id]
        query = f"UPDATE history SET {fields} WHERE task_id = ?"
        conn.execute(query, tuple(values))
        conn.commit()

def db_insert_task(data):
    with get_db_connection() as conn:
        columns = ['job_id', 'task_id', 'timestamp', 'client_name', 'file_name', 'secure_filename', 'status', 'pages', 'copies', 'color', 'duplex', 'price', 'paper_size', 'page_mode', 'start_page', 'end_page']
        query_cols = ', '.join(columns)
        placeholders = ', '.join(['?'] * len(columns))
        values = [data.get(col) for col in columns]
        query = f"INSERT INTO history ({query_cols}) VALUES ({placeholders})"
        conn.execute(query, tuple(values))
        conn.commit()

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def generate_unique_filename(filename):
    timestamp = int(time.time())
    original_secure_name = secure_filename(filename)
    return f"{timestamp}_{uuid.uuid4().hex[:8]}_{original_secure_name}"

def count_pages(filepath):
    try:
        with open(filepath, 'rb') as f:
            reader = PdfReader(f)
            if reader.is_encrypted:
                logging.warning(f"Le fichier PDF {filepath} est chiffré.")
            return len(reader.pages) if reader.pages else 0
    except PyPDF2Errors.PdfReadError as e:
        logging.error(f"Erreur de lecture PDF (PyPDF2) pour {filepath}: {e}")
        return 0
    except Exception as e:
        logging.error(f"Erreur générique lors du comptage des pages pour {filepath}: {e}")
        return 0

def count_pages_worker(filepath, result_queue):
    try:
        page_count = count_pages(filepath)
        result_queue.put(page_count)
    except Exception as e:
        logging.error(f"Erreur inattendue dans le worker count_pages pour {filepath}: {e}")
        result_queue.put(-1)

def convert_to_pdf(source_path, secure_filename):
    pdf_filename = f"{os.path.splitext(secure_filename)[0]}.pdf"
    pdf_path = os.path.join(app.config['CONVERTED_FOLDER'], pdf_filename)
    if source_path.lower().endswith('.pdf'):
        shutil.copy(source_path, pdf_path)
        return pdf_path
    lo_command = app.config['LIBREOFFICE_PATH']
    if not lo_command or not os.path.exists(lo_command):
        logging.error(f"Chemin de LibreOffice non configuré ou invalide: {lo_command}")
        return None
    user_profile_path = os.path.join(os.getcwd(), 'lo_profile', str(time.time_ns()))
    os.makedirs(user_profile_path, exist_ok=True)
    user_profile_url = pathlib.Path(user_profile_path).as_uri()
    try:
        command = [lo_command, f'-env:UserInstallation={user_profile_url}', '--headless', '--convert-to', 'pdf:writer_pdf_Export', '--outdir', app.config['CONVERTED_FOLDER'], source_path]
        subprocess.run(command, check=True, timeout=120)
        timeout = 20
        start_time = time.time()
        while time.time() - start_time < timeout:
            if os.path.exists(pdf_path) and os.path.getsize(pdf_path) > 0:
                time.sleep(1)
                return pdf_path
            time.sleep(0.5)
        logging.error(f"La conversion a réussi mais le fichier PDF n'a pas été trouvé à temps: {pdf_path}")
        return None
    except Exception as e:
        logging.error(f"Erreur de conversion LibreOffice: {e}")
        return None
    finally:
        shutil.rmtree(user_profile_path, ignore_errors=True)

def _run_print_job(job):
    options = webdriver.ChromeOptions()
    options.add_argument("--headless"); options.add_argument("--window-size=1920,1080"); options.add_argument('--no-sandbox'); options.add_argument('--disable-dev-shm-usage'); options.add_argument('--ignore-certificate-errors'); options.add_experimental_option('excludeSwitches', ['enable-logging'])
    driver = None
    try:
        service = ChromeService(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)
        wait = WebDriverWait(driver, 60)
        for i, task in enumerate(job['tasks']):
            logging.info(f"Impression de la tâche {task['task_id']}...")
            db_update_task(task['task_id'], {'status': STATUS['PRINTING']})
            driver.get(app.config['URL_PDF_PRINT'])
            wait.until(EC.presence_of_element_located((By.XPATH, "//input[contains(@value, \"Démarrer l'impression\")]")))
            Select(driver.find_element(By.CSS_SELECTOR, "select[name='ColorMode']")).select_by_value("0" if task['is_color'] else "1")
            if task['is_duplex']:
                if not driver.find_element(By.ID, "DuplexMode").is_selected(): driver.find_element(By.ID, "DuplexMode").click()
                Select(driver.find_element(By.CSS_SELECTOR, "select[name='DuplexType']")).select_by_value("2")
            Select(driver.find_element(By.CSS_SELECTOR, "select[name='MediaSize']")).select_by_value(task.get('paper_size', '2'))
            copies_input = driver.find_element(By.ID, "Copies")
            copies_input.clear(); copies_input.send_keys(str(task.get('copies', 1)))
            if task.get('page_mode') == 'range' and task.get('start_page') and task.get('end_page'):
                range_radio_btn = driver.find_element(By.ID, 'PageMode2')
                driver.execute_script("arguments[0].click();", range_radio_btn)
                start_page_input = wait.until(EC.element_to_be_clickable((By.ID, 'StartPage')))
                end_page_input = wait.until(EC.element_to_be_clickable((By.ID, 'EndPage')))
                start_page_input.send_keys(str(task.get('start_page', '1'))); end_page_input.send_keys(str(task.get('end_page', '1')))
            else:
                driver.find_element(By.ID, 'PageMode1').click()
            driver.find_element(By.NAME, "File").send_keys(os.path.abspath(task['path']))
            driver.find_element(By.XPATH, "//input[contains(@value, \"Démarrer l'impression\")]").click()
            wait.until(EC.url_contains("pprint.cgi"))
            return_button_xpath = "//input[contains(@value, 'Retour à la page précédente')]"
            wait.until(EC.element_to_be_clickable((By.XPATH, return_button_xpath)))
            logging.info(f"Tâche {task['task_id']} envoyée à l'imprimante avec succès.")

            final_success_status = STATUS['PRINT_SUCCESS_NO_COUNT'] if task.get('pages', 0) == 0 else STATUS['PRINT_SUCCESS']
            db_update_task(task['task_id'], {'status': final_success_status})

            if i < len(job['tasks']) - 1: driver.find_element(By.XPATH, return_button_xpath).click()
        return True
    except Exception as e:
        logging.error(f"ERREUR CRITIQUE DANS SELENIUM: {traceback.format_exc()}")
        if driver: driver.save_screenshot(f"selenium_error_{int(time.time())}.png")
        for task_to_fail in job['tasks']:
            db_update_task(task_to_fail['task_id'], {'status': STATUS['PRINT_FAILED']})
        return False
    finally:
        if driver: driver.quit()

def _process_single_file_background(task_info):
    task_id = task_info['task_id']; original_filepath = task_info['original_path']; secure_filename = task_info['secure_filename']

    db_update_task(task_id, {'status': STATUS['CONVERTING'], 'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")})
    final_pdf_path = convert_to_pdf(original_filepath, secure_filename)
    if not final_pdf_path:
        logging.error(f"Échec de conversion pour {secure_filename}")
        db_update_task(task_id, {'status': STATUS['ERROR_CONVERSION']}); return

    db_update_task(task_id, {'status': STATUS['COUNTING']})

    result_queue = Queue()
    process = Process(target=count_pages_worker, args=(final_pdf_path, result_queue))
    process.start()
    process.join(timeout=15)

    if process.is_alive():
        process.terminate()
        process.join()
        logging.error(f"Le comptage des pages pour {final_pdf_path} a dépassé le timeout. Crash probable.")
        db_update_task(task_id, {'status': STATUS['ERROR_FATAL_READ'], 'pages': 0})
        return

    if process.exitcode != 0:
        logging.error(f"Le processus de comptage a crashé pour {final_pdf_path} (exit code: {process.exitcode}).")
        db_update_task(task_id, {'status': STATUS['ERROR_FATAL_READ'], 'pages': 0})
        return

    try:
        pages = result_queue.get_nowait()
    except Exception:
        logging.error(f"Impossible de récupérer le résultat du processus de comptage pour {final_pdf_path}.")
        db_update_task(task_id, {'status': STATUS['ERROR_FATAL_READ'], 'pages': 0})
        return

    if pages > 0:
        db_update_task(task_id, {'pages': pages, 'status': STATUS['READY']})
        logging.info(f"Fichier {secure_filename} prêt pour calcul ({pages} pages).")
    else:
        logging.warning(f"Échec du comptage de pages pour {final_pdf_path}. Passage en mode 'Prêt sans comptage'.")
        db_update_task(task_id, {'pages': 0, 'status': STATUS['READY_NO_PAGE_COUNT']})


@app.route('/')
def index():
    return render_template('index.html', prix_nb=app.config['PRIX_NOIR_BLANC'], prix_c=app.config['PRIX_COULEUR'])

@app.route('/upload_and_process_file', methods=['POST'])
def upload_and_process_file():
    if 'file' not in request.files or not all(f in request.form for f in ['client_name', 'job_id', 'task_id']): return jsonify({'success': False, 'error': "Données manquantes."}), 400
    file = request.files['file']
    if not allowed_file(file.filename): return jsonify({'success': False, 'error': "Type de fichier non autorisé."}), 400

    unique_filename = generate_unique_filename(file.filename)
    filepath = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)
    file.save(filepath)

    try:
        file_size = os.path.getsize(filepath)
        if file_size == 0:
            logging.error(f"Fichier téléversé '{file.filename}' est vide (0 octet). Abandon.")
            task_data = {'job_id': request.form['job_id'], 'task_id': request.form['task_id'], 'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"), 'client_name': request.form['client_name'], 'file_name': file.filename, 'secure_filename': unique_filename, 'status': STATUS['ERROR_FILE_EMPTY']}
            db_insert_task(task_data)
            os.remove(filepath)
            return jsonify({'success': True, 'task_id': task_data['task_id']})
    except OSError as e:
        logging.error(f"Impossible d'accéder au fichier ou de lire sa taille: {e}")
        return jsonify({'success': False, 'error': "Erreur serveur à la lecture du fichier."}), 500

    task_data = {'job_id': request.form['job_id'], 'task_id': request.form['task_id'], 'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"), 'client_name': request.form['client_name'], 'file_name': file.filename, 'secure_filename': unique_filename, 'status': STATUS['QUEUED']}
    db_insert_task(task_data)

    # MODIFIÉ: On crée un dictionnaire propre avec toutes les infos nécessaires pour le thread.
    thread_args = {
        'task_id': task_data['task_id'],
        'original_path': filepath,
        'secure_filename': unique_filename
    }
    thread = threading.Thread(target=_process_single_file_background, args=(thread_args,)); thread.start()

    return jsonify({'success': True, 'task_id': task_data['task_id']})

@app.route('/get_job_status/<job_id>')
def get_job_status(job_id):
    with get_db_connection() as conn:
        cursor = conn.execute("SELECT * FROM history WHERE job_id = ?", (job_id,))
        tasks_from_db = [dict(row) for row in cursor.fetchall()]

    timeout_seconds = app.config.get('TASK_PROCESSING_TIMEOUT', 30)
    now = datetime.now()
    processing_statuses = [STATUS['QUEUED'], STATUS['CONVERTING'], STATUS['COUNTING']]

    for task in tasks_from_db:
        if task['status'] in processing_statuses:
            try:
                task_time = datetime.strptime(task['timestamp'], "%Y-%m-%d %H:%M:%S")
                if now - task_time > timedelta(seconds=timeout_seconds):
                    logging.warning(f"Tâche {task['task_id']} ({task['file_name']}) a dépassé le temps limite. Passage en erreur.")
                    error_status = STATUS['ERROR_CONVERSION']
                    db_update_task(task['task_id'], {'status': error_status})
                    task['status'] = error_status
            except (ValueError, TypeError):
                continue

    tasks_for_ui = [
        {'task_id': t['task_id'], 'file_name': t['file_name'], 'status': t['status'], 'pages': t['pages'], 'price': t['price']}
        for t in tasks_from_db
    ]

    final_statuses = [
        STATUS['READY'], STATUS['READY_NO_PAGE_COUNT'], STATUS['ERROR_CONVERSION'],
        STATUS['ERROR_PAGE_COUNT'], STATUS['ERROR_FILE_EMPTY'], STATUS['ERROR_FATAL_READ'],
        STATUS['PRINT_FAILED'], STATUS['PRINT_SUCCESS'], STATUS['PRINT_SUCCESS_NO_COUNT']
    ]
    is_complete = all(task['status'] in final_statuses for task in tasks_from_db)

    return jsonify({'job_id': job_id, 'tasks': tasks_for_ui, 'is_complete': is_complete})

@app.route('/calculate_summary', methods=['POST'])
def calculate_summary():
    data = request.get_json(); job_id = data.get('job_id'); tasks_with_new_options = data.get('tasks')
    if not all([job_id, tasks_with_new_options]): return jsonify({'success': False, 'error': 'Données manquantes.'}), 400

    with get_db_connection() as conn:
        cursor = conn.execute("SELECT * FROM history WHERE job_id = ? AND (status = ? OR status = ?)", (job_id, STATUS['READY'], STATUS['READY_NO_PAGE_COUNT']));
        history_tasks = {dict(row)['task_id']: dict(row) for row in cursor.fetchall()}

    tasks_ready_for_print = []; total_price = 0.0
    for task_options in tasks_with_new_options:
        task_id = task_options.get('task_id'); original_task_data = history_tasks.get(task_id)
        if not original_task_data: continue

        options = task_options.get('options', {});
        pages = int(original_task_data.get('pages') or 0);
        is_color = options.get('color') == 'color'; is_duplex = options.get('siding') == 'recto_verso'; copies = int(options.get('copies', 1)); page_mode = options.get('pagemode', 'all'); start_page = options.get('startpage'); end_page = options.get('endpage')

        prix_tache = 0.0
        pages_a_imprimer = 0
        if pages > 0:
            pages_a_imprimer = pages
            if page_mode == 'range' and start_page and end_page and start_page.isdigit() and end_page.isdigit():
                try:
                    pages_a_imprimer = int(end_page) - int(start_page) + 1
                    if pages_a_imprimer < 1: pages_a_imprimer = pages
                except ValueError: pages_a_imprimer = pages
            prix_par_page = app.config['PRIX_COULEUR'] if is_color else app.config['PRIX_NOIR_BLANC']
            prix_tache = pages_a_imprimer * prix_par_page * copies
            total_price += prix_tache

        if pages == 0:
            page_mode = 'all'; start_page = None; end_page = None

        update_data = {'copies': copies, 'color': 'Couleur' if is_color else 'N&B', 'duplex': 'Recto-Verso' if is_duplex else 'Recto', 'price': f"{prix_tache:.2f}" if pages > 0 else "0.00", 'paper_size': options.get('papersize', '2'), 'page_mode': page_mode, 'start_page': start_page, 'end_page': end_page}
        db_update_task(task_id, update_data)

        pdf_filename = f"{os.path.splitext(original_task_data['secure_filename'])[0]}.pdf"
        final_pdf_path = os.path.join(app.config['CONVERTED_FOLDER'], pdf_filename)
        tasks_ready_for_print.append({'path': final_pdf_path, 'name': original_task_data['file_name'], 'pages': pages, 'copies': copies, 'is_color': is_color, 'is_duplex': is_duplex, 'prix': prix_tache, 'paper_size': options.get('papersize', '2'), 'page_mode': page_mode, 'start_page': start_page, 'end_page': end_page, 'task_id': task_id})

    if not tasks_ready_for_print: return jsonify({'success': False, 'error': 'Aucune tâche valide trouvée.'}), 400
    print_job_summary = {'tasks': tasks_ready_for_print, 'prix_total': total_price, 'client_name': history_tasks[tasks_ready_for_print[0]['task_id']]['client_name'], 'job_id': job_id}
    session['print_job'] = print_job_summary
    return jsonify({'success': True, 'print_job_summary': print_job_summary})

@app.route('/print', methods=['POST'])
def execute_print():
    print_job = session.get('print_job');
    if not print_job: return jsonify({'success': False, 'error': 'Session expirée.'}), 400
    print_process = Process(target=_run_print_job, args=(print_job,));
    print_process.start()
    session.pop('print_job', None);
    return jsonify({'success': True})

def get_task_from_db(task_id):
    with get_db_connection() as conn:
        cursor = conn.execute("SELECT * FROM history WHERE task_id = ?", (task_id,));
        return cursor.fetchone()

@app.route('/download/<task_id>')
def download_file(task_id):
    if not session.get('is_admin'): return "Accès non autorisé", 403
    task_info = get_task_from_db(task_id)
    if not task_info: return "Tâche introuvable.", 404
    secure_filename = task_info['secure_filename']
    pdf_filename = f"{os.path.splitext(secure_filename)[0]}.pdf"; pdf_path = os.path.join(app.config['CONVERTED_FOLDER'], pdf_filename)
    if os.path.exists(pdf_path): return send_from_directory(app.config['CONVERTED_FOLDER'], pdf_filename, as_attachment=False)
    original_path = os.path.join(app.config['UPLOAD_FOLDER'], secure_filename)
    if os.path.exists(original_path): return send_from_directory(app.config['UPLOAD_FOLDER'], secure_filename, as_attachment=True)
    return "Fichier introuvable.", 404

@app.route('/reprint', methods=['POST'])
def reprint_task():
    if not session.get('is_admin'): return jsonify({'success': False, 'error': 'Non autorisé'}), 403
    data = request.get_json(); task_id = data.get('task_id')
    if not task_id: return jsonify({'success': False, 'error': 'task_id manquant.'})
    task_info = get_task_from_db(task_id)
    if not task_info: return jsonify({'success': False, 'error': f'Tâche {task_id} introuvable.'})
    pdf_filename = f"{os.path.splitext(task_info['secure_filename'])[0]}.pdf"; pdf_path = os.path.join(app.config['CONVERTED_FOLDER'], pdf_filename)
    if not os.path.exists(pdf_path): return jsonify({'success': False, 'error': f'Fichier PDF {pdf_filename} introuvable.'})
    reprint_job = {'tasks': [{'path': pdf_path, 'name': task_info['file_name'], 'copies': 1, 'pages': task_info['pages'], 'is_color': data.get('is_color', False), 'is_duplex': data.get('is_duplex', False), 'paper_size': data.get('paper_size', '2'), 'page_mode': 'all', 'task_id': task_id}]}
    reprint_process = Process(target=_run_print_job, args=(reprint_job,)); reprint_process.start()
    return jsonify({'success': True})

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        if (request.form.get('username') == app.config['ADMIN_USERNAME'] and request.form.get('password') == app.config['ADMIN_PASSWORD']):
            session['is_admin'] = True; return jsonify({'success': True})
        else: return jsonify({'success': False, 'error': 'Identifiants incorrects'})
    return render_template('admin.html', is_logged_in=session.get('is_admin', False))

@app.route('/api/admin_data')
def admin_data_api():
    if not session.get('is_admin'): return jsonify({'error': 'Non autorisé'}), 403
    with get_db_connection() as conn:
        cursor = conn.execute("SELECT * FROM history ORDER BY timestamp DESC");
        history = [dict(row) for row in cursor.fetchall()]

    grouped_commands = OrderedDict()
    for row in history:
        key = row.get('job_id')
        if not key: continue
        if key not in grouped_commands: grouped_commands[key] = {'job_id': key, 'timestamp': row['timestamp'], 'client_name': row['client_name'], 'total_price': 0.0, 'files': [], 'job_status': 'success'}
        grouped_commands[key]['files'].append(row)

        try:
            price = float(row.get('price') or 0.0)
            if 'ERREUR' not in row.get('status', ''):
                grouped_commands[key]['total_price'] += price
        except (ValueError, TypeError): pass

        if 'ERREUR' in row.get('status', ''): grouped_commands[key]['job_status'] = 'error'
        elif any(s in row.get('status', '') for s in ['EN_ATTENTE', 'EN_COURS', 'QUEUED', 'CONVERTING', 'COUNTING']):
             if grouped_commands[key]['job_status'] != 'error': grouped_commands[key]['job_status'] = 'pending'

    final_commands = list(grouped_commands.values())

    with get_db_connection() as conn:
        valid_print_statuses = (STATUS['PRINT_SUCCESS'], STATUS['PRINT_SUCCESS_NO_COUNT'])
        placeholders = ','.join('?' for _ in valid_print_statuses)
        cursor = conn.execute(f"SELECT SUM(price) FROM history WHERE status IN ({placeholders})", valid_print_statuses);
        total_revenue = cursor.fetchone()[0] or 0.0
        cursor = conn.execute(f"SELECT SUM(pages * copies) FROM history WHERE status IN ({placeholders}) AND pages > 0", valid_print_statuses);
        total_pages_printed = cursor.fetchone()[0] or 0

    return jsonify({'commands': final_commands, 'total_revenue': f"{total_revenue:.2f}", 'total_pages': total_pages_printed})

@app.route('/api/delete_task/<task_id>', methods=['POST'])
def delete_task(task_id):
    if not session.get('is_admin'): return jsonify({'success': False, 'error': 'Non autorisé'}), 403
    with get_db_connection() as conn:
        conn.execute("DELETE FROM history WHERE task_id = ?", (task_id,));
        conn.commit();
    return jsonify({'success': True})

@app.route('/api/delete_all_tasks', methods=['POST'])
def delete_all_tasks():
    if not session.get('is_admin'): return jsonify({'success': False, 'error': 'Non autorisé'}), 403
    with get_db_connection() as conn:
        conn.execute("DELETE FROM history");
        conn.commit();
    logging.warning("L'historique complet a été supprimé par un admin.");
    return jsonify({'success': True})

@app.route('/logout')
def logout():
    session.pop('is_admin', None); return redirect(url_for('login'))

@app.cli.command('init-db')
def init_db_command():
    init_db()
    click.echo('Base de données initialisée.')

def create_folders():
    for folder in [app.config['UPLOAD_FOLDER'], app.config['CONVERTED_FOLDER']]:
        if not os.path.exists(folder): os.makedirs(folder); logging.info(f"Dossier créé : {folder}")

if __name__ == '__main__':
    if sys.platform.startswith('win') or sys.platform.startswith('darwin'):
        from multiprocessing import freeze_support
        freeze_support()

    create_folders()
    app.run(host='0.0.0.0', port=5001)
 
 
 
======================================================= 
FICHIER : schema.sql 
======================================================= 
 
-- schema.sql
DROP TABLE IF EXISTS history;

CREATE TABLE history (
  task_id TEXT PRIMARY KEY,
  job_id TEXT NOT NULL,
  timestamp TEXT NOT NULL,
  client_name TEXT NOT NULL,
  file_name TEXT NOT NULL,
  secure_filename TEXT NOT NULL,
  status TEXT,
  pages INTEGER,
  copies INTEGER,
  color TEXT,
  duplex TEXT,
  price REAL,
  paper_size TEXT,
  page_mode TEXT,
  start_page TEXT,
  end_page TEXT
); 
 
 
======================================================= 
FICHIER : static\css\style.css 
======================================================= 
 
/* Fichier : static/css/style.css */
body { background-color: #f8f9fa; }
.btn-custom-submit { background-color: #212529; color: #fff; border: 2px solid #212529; border-radius: 50px; padding: 0.75rem 1.8rem; font-weight: 500; transition: all 0.2s ease-in-out; width: 100%; }
.btn-custom-secondary { background-color: #212529; color: #fff; border: 2px solid #212529; border-radius: 50px; padding: 0.75rem 1.8rem; font-weight: 500; transition: all 0.2s ease-in-out; width: 100%; }

/* Style pour la liste de fichiers dans index.html */
.option-btn-group { display: flex; gap: 0.5rem; }
.option-btn { flex-grow: 1; transition: all 0.2s ease-in-out; background-color: #fff; border: 1px solid #dee2e6; color: #212529; padding: 0.5rem; font-size: 0.9rem; }
.option-btn.active { background-color: #212529; color: #fff; border-color: #212529; }
.file-info-container h6 { word-break: break-all; }
#file-list-container .list-group-item { border-radius: 0.5rem; }

/* Style pour la modale de confirmation */
.task-card { background-color: #fff; border: 1px solid #dee2e6; border-radius: 0.5rem; padding: 1rem; margin-bottom: 1rem; }
.task-details { display: grid; grid-template-columns: 1fr 1fr; gap: 0.75rem; font-size: 0.9rem; }
.task-details .detail-item { display: flex; align-items: center; }
.task-details .detail-item i { margin-right: 8px; font-size: 1.2em; }
.file-name { word-break: break-all; }

/* Overlay de chargement */
#loading-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(248, 249, 250, 0.9); display: none; justify-content: center; align-items: center; flex-direction: column; z-index: 9999; text-align: center; }
#loading-overlay .spinner-border { width: 3rem; height: 3rem; color: #212529; }
 
 
 
======================================================= 
FICHIER : static\js\admin.js 
======================================================= 
 
// static/js/admin.js (version corrigée)
document.addEventListener('DOMContentLoaded', function() {
    const loginSection = document.getElementById('login-section');
    const adminPanel = document.getElementById('admin-panel');
    const loginForm = document.getElementById('login-form');
    const loginError = document.getElementById('login-error');

    let refreshInterval;

    function initializeAdminPanel() {
        const refreshBtn = document.getElementById('refresh-btn');
        const deleteAllBtn = document.getElementById('delete-all-btn');
        const commandsContainer = document.getElementById('commands-container');
        const reprintToastEl = document.getElementById('reprintToast');
        const reprintToast = reprintToastEl ? new bootstrap.Toast(reprintToastEl) : null;

        const fetchAdminData = () => {
            const openCollapses = new Set(Array.from(commandsContainer.querySelectorAll('.collapse.show')).map(el => el.id));

            fetch('/api/admin_data')
                .then(res => {
                    if (res.status === 401 || res.status === 403) window.location.reload();
                    if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
                    return res.json();
                })
                .then(data => {
                    if (data.error) throw new Error(data.error);

                    document.getElementById('total-revenue-display').textContent = `${data.total_revenue} €`;
                    document.getElementById('total-pages-display').textContent = data.total_pages;

                    commandsContainer.innerHTML = '';
                    deleteAllBtn.disabled = !data.commands || data.commands.length === 0;
                    if (!data.commands || data.commands.length === 0) {
                        commandsContainer.innerHTML = '<p class="text-center text-muted">Aucune commande dans l\'historique.</p>';
                        return;
                    }

                    data.commands.forEach((command, index) => {
                        const collapseId = `command-details-${command.job_id}`;
                        const showClass = openCollapses.has(collapseId) ? 'show' : '';

                        const filesHTML = command.files.map(file => {
                            let statusBadge;
                            const status = file.status || 'INCONNU';
                            if (status.includes('ERREUR')) statusBadge = `<span class="badge bg-danger">${status.replace(/_/g, ' ')}</span>`;
                            else if (status === 'IMPRIME_AVEC_SUCCES') statusBadge = `<span class="badge bg-success">Imprimé</span>`;
                            else if (status === 'IMPRESSION_EN_COURS') statusBadge = `<span class="badge bg-info text-dark">Impression...</span>`;
                            else statusBadge = `<span class="badge bg-secondary">${status.replace(/_/g, ' ')}</span>`;

                            const priceDisplay = file.price ? `<small class="text-muted">(${(+file.price).toFixed(2)}€)</small>` : '';
                            const downloadLink = file.task_id ? `<a href="/download/${file.task_id}" target="_blank" class="text-decoration-none">${file.file_name}</a>` : file.file_name;

                            return `
                                <li class="list-group-item d-flex justify-content-between align-items-center flex-wrap">
                                    <div class="me-auto" style="word-break: break-all; padding-right: 1rem;">
                                        ${downloadLink} ${priceDisplay}
                                        <div class="mt-1">${statusBadge}</div>
                                    </div>
                                    <div class="btn-group mt-1 mt-sm-0" role="group">
                                        <button class="btn btn-sm btn-outline-secondary reprint-btn" title="Réimprimer"
                                            data-task-id="${file.task_id}" data-is-color="${file.color === 'Couleur'}"
                                            data-is-duplex="${file.duplex === 'Recto-Verso'}" data-paper-size="${file.paper_size}"
                                            ${status === 'ERREUR_CONVERSION' || !file.task_id ? 'disabled' : ''}>
                                            <i class="bi bi-printer"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger delete-task-btn" title="Supprimer tâche"
                                            data-task-id="${file.task_id}" data-filename="${file.file_name}" ${!file.task_id ? 'disabled' : ''}>
                                            <i class="bi bi-x-lg"></i>
                                        </button>
                                    </div>
                                </li>`;
                        }).join('');

                        const cardStatusClass = command.job_status === 'error' ? 'status-error' : (command.job_status === 'pending' ? 'status-pending' : '');
                        commandsContainer.innerHTML += `
                            <div class="card shadow-sm mb-3 ${cardStatusClass}">
                                <div class="card-body">
                                    <a href="#" class="text-decoration-none text-dark" data-bs-toggle="collapse" data-bs-target="#${collapseId}">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div><h5 class="card-title mb-0">${command.client_name}</h5><small class="text-muted">${command.timestamp}</small></div>
                                            <div class="text-end"><strong class="fs-5">${command.total_price.toFixed(2)} €</strong><div class="small text-muted">${command.files.length} fichier(s) <i class="bi bi-chevron-down"></i></div></div>
                                        </div>
                                    </a>
                                    <div class="collapse ${showClass}" id="${collapseId}"><hr><ul class="list-group list-group-flush">${filesHTML}</ul></div>
                                </div>
                            </div>`;
                    });
                })
                .catch(error => {
                    console.error('Erreur lors de la récupération des données admin:', error);
                    commandsContainer.innerHTML = '<div class="alert alert-danger">Impossible de charger l\'historique. Le serveur est peut-être inaccessible.</div>';
                });
        };

        refreshBtn.addEventListener('click', fetchAdminData);

        deleteAllBtn.addEventListener('click', () => {
             if (confirm("ATTENTION !\n\nÊtes-vous sûr de vouloir effacer TOUT l'historique ?\n\nCETTE ACTION EST IRRÉVERSIBLE.")) {
                fetch('/api/delete_all_tasks', { method: 'POST' }).then(res => res.json()).then(data => {
                    if (data.success) fetchAdminData(); else alert(`Erreur: ${data.error}`);
                });
            }
        });

        commandsContainer.addEventListener('click', (event) => {
            const reprintButton = event.target.closest('.reprint-btn');
            if (reprintButton) {
                reprintButton.disabled = true;
                reprintButton.innerHTML = `<span class="spinner-border spinner-border-sm"></span>`;
                const data = {
                    task_id: reprintButton.dataset.taskId,
                    is_color: reprintButton.dataset.isColor === 'true',
                    is_duplex: reprintButton.dataset.isDuplex === 'true',
                    paper_size: reprintButton.dataset.paperSize || '2'
                };
                fetch('/reprint', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) })
                    .then(res => res.json()).then(result => {
                        if (result.success && reprintToast) reprintToast.show();
                        else alert(`Erreur: ${result.error}`);
                    }).finally(() => {
                        setTimeout(() => {
                            reprintButton.disabled = false;
                            reprintButton.innerHTML = `<i class="bi bi-printer"></i>`;
                        }, 3000);
                    });
                return;
            }

            const deleteTaskButton = event.target.closest('.delete-task-btn');
            if (deleteTaskButton) {
                const { taskId, filename } = deleteTaskButton.dataset;
                if (confirm(`Supprimer la tâche pour "${filename}" ?`)) {
                    fetch(`/api/delete_task/${taskId}`, { method: 'POST' })
                        .then(res => res.json()).then(data => {
                            if (data.success) fetchAdminData(); else alert(`Erreur: ${data.error}`);
                        });
                }
            }
        });

        document.addEventListener("visibilitychange", () => {
            if (document.hidden) clearInterval(refreshInterval);
            else { fetchAdminData(); refreshInterval = setInterval(fetchAdminData, 5000); }
        });

        fetchAdminData();
        refreshInterval = setInterval(fetchAdminData, 5000);
    }

    function showAdminPanel() {
        loginSection.classList.add('d-none');
        adminPanel.classList.remove('d-none');
        initializeAdminPanel();
    }

    if (loginForm) {
        loginForm.addEventListener('submit', function(event) {
            event.preventDefault();
            const formData = new FormData(loginForm);
            fetch('/login', { method: 'POST', body: formData })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showAdminPanel();
                    } else {
                        loginError.textContent = data.error || "Une erreur est survenue.";
                        loginError.classList.remove('d-none');
                    }
                })
                .catch(err => {
                    loginError.textContent = "Erreur de connexion avec le serveur.";
                    loginError.classList.remove('d-none');
                });
        });
    }

    // `isUserLoggedIn` est défini dans le template admin.html
    if (typeof isUserLoggedIn !== 'undefined' && isUserLoggedIn) {
        showAdminPanel();
    }
});
 
 
 
======================================================= 
FICHIER : static\js\main.js 
======================================================= 
 
// static/js/main.js
document.addEventListener('DOMContentLoaded', function() {
    const fileInput = document.getElementById('file-input');
    const addFileButton = document.getElementById('add-file-button');
    const fileListContainer = document.getElementById('file-list-container');
    const clientNameInput = document.getElementById('client_name');
    const summaryButton = document.getElementById('summary-button');
    const modalPrintForm = document.getElementById('modal-print-form');
    const fileOptionsArea = document.getElementById('file-options-area');
    const toastContainer = document.getElementById('toast-container');

    const PRIX_NB = parseFloat(document.getElementById('prix-nb-display').textContent.replace(',', '.'));
    const PRIX_C = parseFloat(document.getElementById('prix-c-display').textContent.replace(',', '.'));

    let fileStore = [];
    let currentJobId = null;
    let pollingInterval = null;

    function showToast(message, type = 'danger') {
        const toastId = `toast-${Date.now()}`;
        const toastHTML = `
            <div id="${toastId}" class="toast align-items-center text-bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
              <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
              </div>
            </div>`;
        toastContainer.innerHTML += toastHTML;
        const toastEl = document.getElementById(toastId);
        const toast = new bootstrap.Toast(toastEl);
        toast.show();
        toastEl.addEventListener('hidden.bs.toast', () => toastEl.remove());
    }

    function formatBytes(bytes, d = 2) {
        if (!bytes || bytes === 0) return '0 B';
        const k = 1024;
        const s = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return `${parseFloat((bytes / Math.pow(k, i)).toFixed(d))} ${s[i]}`;
    }

    function calculateTaskPrice(taskId) {
        const fileEntry = fileStore.find(f => f.id === taskId);
        const taskRow = fileListContainer.querySelector(`li[data-task-id="${taskId}"]`);
        if (!fileEntry || !taskRow) return;

        const pricePlaceholder = taskRow.querySelector('.task-price-placeholder');
        // MODIFIÉ: S'assurer que serverData existe avant de chercher les pages
        const pages = fileEntry.serverData ? (fileEntry.serverData.pages || 0) : 0;

        if (pages === 0) {
            pricePlaceholder.textContent = 'Prix à définir';
            return;
        }

        const copies = parseInt(taskRow.querySelector('input[name="copies"]').value) || 1;
        const isColor = taskRow.querySelector('input[name="color"]').value === 'color';
        const pageMode = taskRow.querySelector('input[name="pagemode"]').value;
        const startPage = parseInt(taskRow.querySelector('input[name="startpage"]').value);
        const endPage = parseInt(taskRow.querySelector('input[name="endpage"]').value);

        let pagesToPrint = pages;
        if (pageMode === 'range' && startPage > 0 && endPage >= startPage) {
            pagesToPrint = (endPage - startPage) + 1;
        }

        const pricePerPage = isColor ? PRIX_C : PRIX_NB;
        const totalPrice = pagesToPrint * copies * pricePerPage;

        pricePlaceholder.textContent = `${totalPrice.toFixed(2)} €`;
    }

    addFileButton.addEventListener('click', () => fileInput.click());

    fileInput.addEventListener('change', () => {
        if (!clientNameInput.value.trim()) {
            showToast("Veuillez d'abord renseigner votre nom.", "warning");
            fileInput.value = '';
            return;
        }
        clientNameInput.disabled = true;

        if (!currentJobId) {
            currentJobId = `job-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;
        }

        const newFiles = Array.from(fileInput.files);
        fileInput.value = '';

        newFiles.forEach(file => {
            if (fileStore.some(f => f.file.name === file.name && f.file.size === file.size)) return;
            if (file.size === 0) {
                showToast(`Le fichier "${file.name}" est vide et ne peut pas être envoyé.`, 'danger');
                return;
            }
            const taskId = `task-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;
            const fileEntry = { id: taskId, file: file, status: 'queued', serverStatus: null, serverData: null };
            fileStore.push(fileEntry);
            addFileToListDOM(fileEntry, fileStore.length - 1);
        });

        startProcessingQueue();
        if (!pollingInterval) startPolling();
    });

    function addFileToListDOM(fileEntry, index) {
        fileOptionsArea.classList.remove('d-none');
        const template = document.getElementById('file-row-template');
        const file = fileEntry.file;
        const fileRow = template.content.cloneNode(true).querySelector('li');
        fileRow.dataset.taskId = fileEntry.id;
        fileRow.querySelector('.file-name-placeholder').textContent = file.name;
        fileRow.querySelector('.file-details-placeholder').innerHTML = `<i class="bi bi-file-earmark-binary"></i> ${file.type || 'Fichier'} | <i class="bi bi-hdd"></i> ${formatBytes(file.size)}`;

        const collapseLink = fileRow.querySelector('[data-bs-toggle="collapse"]');
        const collapseTarget = fileRow.querySelector('.collapse');
        if (collapseLink && collapseTarget) {
            const collapseId = `advanced-options-${index}`;
            collapseLink.href = `#${collapseId}`;
            collapseTarget.id = collapseId;
        }

        fileListContainer.appendChild(fileRow);
    }

    function startProcessingQueue() {
        const filesToUpload = fileStore.filter(f => f.status === 'queued');
        filesToUpload.forEach(fileEntry => {
            fileEntry.status = 'uploading';
            updateFileStatusUI(fileEntry.id, 'uploading');
            const formData = new FormData();
            formData.append('file', fileEntry.file);
            formData.append('client_name', clientNameInput.value);
            formData.append('job_id', currentJobId);
            formData.append('task_id', fileEntry.id);
            fetch('/upload_and_process_file', { method: 'POST', body: formData })
                .then(res => res.json())
                .then(data => { if (!data.success) { fileEntry.status = 'error'; updateFileStatusUI(fileEntry.id, 'error', data.error || 'Erreur serveur'); }})
                .catch(err => { fileEntry.status = 'error'; updateFileStatusUI(fileEntry.id, 'error', 'Erreur de connexion.'); });
        });
    }

    function startPolling() {
        if (pollingInterval) clearInterval(pollingInterval);
        pollingInterval = setInterval(() => {
            if (!currentJobId || fileStore.length === 0) {
                clearInterval(pollingInterval);
                pollingInterval = null;
                updateSummaryButton();
                return;
            }
            fetch(`/get_job_status/${currentJobId}`)
                .then(res => res.json())
                .then(data => {
                    if (!data || !data.tasks) return;
                    data.tasks.forEach(taskData => {
                        const fileEntry = fileStore.find(f => f.id === taskData.task_id);
                        // MODIFIÉ: On met à jour même si le statut n'a pas changé, pour forcer la ré-évaluation de l'UI.
                        if (fileEntry) {
                            fileEntry.serverStatus = taskData.status;
                            fileEntry.serverData = taskData;
                            updateFileStatusUI(fileEntry.id, taskData.status, taskData);
                        }
                    });
                    updateSummaryButton();
                    if (data.is_complete) { clearInterval(pollingInterval); pollingInterval = null; }
                })
                .catch(err => { console.error("Erreur de polling:", err); clearInterval(pollingInterval); pollingInterval = null; });
        }, 2500);
    }

    function updateSummaryButton() {
        if (fileStore.length === 0) {
            summaryButton.disabled = true;
            summaryButton.textContent = 'Suivant';
            return;
        }
        const finalStates = ['PRET_POUR_CALCUL', 'PRET_SANS_COMPTAGE', 'ERREUR_CONVERSION', 'ERREUR_PAGE_COUNT', 'ERREUR_FICHIER_VIDE', 'ERREUR_LECTURE_FATALE'];
        const isProcessing = fileStore.some(f => !f.serverStatus || !finalStates.includes(f.serverStatus));
        const hasReadyFiles = fileStore.some(f => f.serverStatus === 'PRET_POUR_CALCUL' || f.serverStatus === 'PRET_SANS_COMPTAGE');
        if (isProcessing) {
            summaryButton.disabled = true;
            summaryButton.innerHTML = `<span class="spinner-border spinner-border-sm"></span> Traitement...`;
        } else if (hasReadyFiles) {
            summaryButton.disabled = false;
            summaryButton.textContent = 'Calculer le total';
        } else {
            summaryButton.disabled = true;
            summaryButton.textContent = 'Aucun fichier valide';
        }
    }

    function updateFileStatusUI(taskId, status, data) {
        const fileRow = document.querySelector(`li[data-task-id="${taskId}"]`);
        if (!fileRow) return;
        const optionsContainer = fileRow.querySelector('.options-container');
        const isReady = status === 'PRET_POUR_CALCUL' || status === 'PRET_SANS_COMPTAGE';

        optionsContainer.classList.toggle('d-none', !isReady);

        // CORRECTION: On appelle la fonction de calcul de prix à chaque mise à jour de statut.
        // Si le fichier n'est pas prêt, la fonction mettra "--.-- €" ou "Prix à définir".
        calculateTaskPrice(taskId);

        const removeBtn = fileRow.querySelector('.remove-file-btn');
        const processingStates = ['uploading', 'EN_ATTENTE_TRAITEMENT', 'CONVERSION_EN_COURS', 'COMPTAGE_PAGES'];
        removeBtn.disabled = processingStates.includes(status);
        const statusDiv = fileRow.querySelector('.file-status');
        let statusHTML = '';
        switch (status) {
            case 'uploading': case 'EN_ATTENTE_TRAITEMENT': case 'CONVERSION_EN_COURS': case 'COMPTAGE_PAGES':
                statusHTML = `<span class="text-primary"><span class="spinner-border spinner-border-sm me-2"></span>Traitement...</span>`; break;
            case 'ERREUR_CONVERSION': statusHTML = `<span class="text-danger fw-bold">❌ Fichier non supporté</span>`; break;
            case 'ERREUR_FICHIER_VIDE': statusHTML = `<span class="text-danger fw-bold">❌ Fichier vide</span>`; break;
            case 'ERREUR_LECTURE_FATALE': statusHTML = `<span class="text-danger fw-bold">❌ Fichier corrompu</span>`; break;
            case 'PRET_POUR_CALCUL': statusHTML = `<span class="text-success fw-bold">✅ Prêt</span>`; break;
            case 'PRET_SANS_COMPTAGE': statusHTML = `<span class="text-warning fw-bold">⚠️ Prêt (comptage manuel)</span>`; break;
            default: statusHTML = `<span class="text-muted">En attente...</span>`;
        }
        statusDiv.innerHTML = statusHTML;
    }

    fileListContainer.addEventListener('change', (e) => {
        if (e.target.matches('input[name="copies"], input[name="startpage"], input[name="endpage"], select[name="papersize"]')) {
            const taskId = e.target.closest('li').dataset.taskId;
            calculateTaskPrice(taskId);
        }
    });

    fileListContainer.addEventListener('click', (e) => {
        const removeBtn = e.target.closest('.remove-file-btn');
        if (removeBtn && !removeBtn.disabled) {
            const liToRemove = removeBtn.closest('li');
            if (liToRemove) {
                const taskId = liToRemove.dataset.taskId;
                fileStore = fileStore.filter(f => f.id !== taskId);
                liToRemove.remove();
                if (fileStore.length === 0) {
                    clientNameInput.disabled = false;
                    currentJobId = null;
                    fileOptionsArea.classList.add('d-none');
                }
            }
            return;
        }

        const optionBtn = e.target.closest('.option-btn');
        if (optionBtn) {
            const li = optionBtn.closest('li');
            const taskId = li.dataset.taskId;
            const group = optionBtn.closest('.option-btn-group');
            const groupName = group.dataset.groupName;
            const value = optionBtn.dataset.value;
            li.querySelector(`input[name="${groupName}"]`).value = value;
            group.querySelectorAll('.option-btn').forEach(btn => btn.classList.remove('active'));
            optionBtn.classList.add('active');
            if (groupName === 'pagemode') {
                li.querySelector('.page-range-inputs').classList.toggle('d-none', value !== 'range');
            }
            calculateTaskPrice(taskId);
        }
    });

    summaryButton.addEventListener('click', function() {
        const tasksPayload = fileStore
            .filter(f => f.serverStatus === 'PRET_POUR_CALCUL' || f.serverStatus === 'PRET_SANS_COMPTAGE')
            .map(f => {
                const taskRow = fileListContainer.querySelector(`li[data-task-id="${f.id}"]`);
                const options = {};
                taskRow.querySelectorAll('[name]').forEach(input => { options[input.name] = input.value; });
                return { task_id: f.id, options: options };
            });
        if (tasksPayload.length === 0) { showToast("Aucun fichier n'est prêt à être imprimé.", "warning"); return; }
        fetch('/calculate_summary', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ job_id: currentJobId, tasks: tasksPayload }) })
            .then(res => res.json())
            .then(data => {
                if (data.success && data.print_job_summary) {
                    const hasFailedFiles = fileStore.some(f => f.serverStatus?.includes('ERREUR'));
                    showConfirmationModal(data.print_job_summary, hasFailedFiles);
                } else { showToast(data.error || "Impossible de calculer le résumé."); }
            });
    });

    function showConfirmationModal(data, hasFailedFiles) {
        document.getElementById('modal-client-name').textContent = data.client_name;
        const taskList = document.getElementById('modal-task-list');
        taskList.innerHTML = '';

        if (hasFailedFiles) {
            taskList.innerHTML += `<div class="alert alert-warning small"><i class="bi bi-exclamation-triangle-fill"></i> <strong>Attention :</strong> Certains fichiers n'ont pas pu être traités.</div>`;
        }

        let manualPriceTasksExist = false;
        data.tasks.forEach(task => {
            const colorIcon = task.is_color ? '<i class="bi bi-palette-fill text-primary"></i> Couleur' : '<i class="bi bi-palette text-secondary"></i> N&B';
            const duplexIcon = task.is_duplex ? '<i class="bi bi-layers-fill text-secondary"></i> R/V' : '<i class="bi bi-file-earmark-text text-secondary"></i> Recto';
            const pageInfo = task.pages > 0 ? `${task.pages} page(s)` : `<span class="text-warning">N/A</span>`;
            let priceBadge = `<span class="badge bg-primary rounded-pill fs-6">${task.prix.toFixed(2)} €</span>`;
            if (task.pages === 0) {
                priceBadge = `<span class="badge bg-warning text-dark rounded-pill fs-6">Prix à définir</span>`;
                manualPriceTasksExist = true;
            }
            const taskHTML = `<div class="task-card"><div class="d-flex justify-content-between align-items-start"><h6 class="fw-bold file-name me-3">${task.name}</h6>${priceBadge}</div><hr class="my-2"><div class="task-details text-muted"><div class="detail-item"><i class="bi bi-file-earmark-ruled text-secondary"></i> ${pageInfo}</div><div class="detail-item"><i class="bi bi-files text-secondary"></i> ${task.copies} copie(s)</div><div class="detail-item">${colorIcon}</div><div class="detail-item">${duplexIcon}</div></div></div>`;
            taskList.innerHTML += taskHTML;
        });

        let totalPriceDisplay = `${data.prix_total.toFixed(2)} €`;
        if (manualPriceTasksExist) {
            totalPriceDisplay += ` <span class="fs-6 text-warning">(+ tâches manuelles)</span>`;
        }
        document.getElementById('modal-total-price').innerHTML = totalPriceDisplay;

        new bootstrap.Modal(document.getElementById('confirmModal')).show();
    }

    modalPrintForm.addEventListener('submit', function(event) {
        event.preventDefault();
        const confirmModal = bootstrap.Modal.getInstance(document.getElementById('confirmModal'));
        if (confirmModal) confirmModal.hide();
        document.getElementById('loading-overlay').style.display = 'flex';
        fetch('/print', { method: 'POST' })
            .then(res => res.json())
            .then(data => {
                document.getElementById('loading-overlay').style.display = 'none';
                if (data.success) { window.location.href = '/?success_message=Impression+lancée+avec+succès+!'; }
                else { showToast(data.error || "Une erreur s'est produite."); }
            })
            .catch(err => {
                console.error(err);
                document.getElementById('loading-overlay').style.display = 'none';
                showToast("Erreur de communication avec le serveur.");
            });
    });

    const urlParams = new URLSearchParams(window.location.search);
    const successMessage = urlParams.get('success_message');
    if (successMessage) {
        showToast(successMessage, 'success');
        window.history.replaceState({}, document.title, "/");
    }
});
 
 
 
======================================================= 
FICHIER : templates\index.html 
======================================================= 
 
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Impression à Distance</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    <link rel="icon" href="data:;base64,iVBORw0KGgo="> <!-- Empêche l'erreur favicon -->
</head>
<body>
    <div class="container mt-5" style="max-width: 700px;">
        <div class="mb-4"><a href="https://www.latelier.app" class="btn btn-outline-secondary btn-sm"><i class="bi bi-arrow-left"></i> Retour au site</a></div>
        <div class="card">
            <div class="card-body p-4 p-md-5">
                <h1 class="card-title text-center mb-4">Service d'Impression</h1>
                <form id="print-form">
                    <div class="mb-3">
                        <label for="client_name" class="form-label">Votre Nom</label>
                        <input type="text" class="form-control" id="client_name" name="client_name" required>
                    </div>
                    <input type="file" id="file-input" multiple class="d-none">
                    <div class="d-grid mb-3"><button type="button" class="btn btn-custom-secondary" id="add-file-button"><i class="bi bi-plus-circle-dotted"></i> Ajouter des fichiers</button></div>
                    <div id="file-options-area" class="d-none"><hr><p class="fw-bold">Fichiers à imprimer :</p><ul class="list-group" id="file-list-container"></ul><hr></div>
                    <div class="alert alert-info small mt-3"><strong>N&B :</strong> <span id="prix-nb-display">{{ "%.2f"|format(prix_nb) }}</span> € | <strong>Couleur :</strong> <span id="prix-c-display">{{ "%.2f"|format(prix_c) }}</span> €</div>
                    <div class="d-grid mt-4">
                        <button type="button" id="summary-button" class="btn btn-custom-submit" disabled>Suivant</button>
                    </div>
                </form>
                <div class="text-center mt-3"><a href="{{ url_for('login') }}" class="text-muted small">Espace Commerçant</a></div>
            </div>
        </div>
    </div>

    <template id="file-row-template">
        <li class="list-group-item p-3 mb-2 border rounded">
            <div class="d-flex justify-content-between align-items-start">
                <div class="me-3 file-info-container">
                    <h6 class="fw-bold mb-1 file-name-placeholder"></h6>
                    <small class="text-muted file-details-placeholder"></small>
                </div>
                <!-- NOUVEAU: Conteneur pour le prix dynamique -->
                <div class="text-end">
                    <strong class="fs-5 task-price-placeholder">--.-- €</strong>
                    <button type="button" class="btn-close remove-file-btn ms-2" aria-label="Supprimer"></button>
                </div>
            </div>
            <div class="file-status mt-2 small"></div>
            <div class="border rounded p-3 mt-2 bg-light options-container d-none">
                <div class="d-flex flex-column flex-sm-row justify-content-around align-items-center gap-3">
                    <div class="d-flex align-items-center gap-2"><label class="form-label mb-0 small">Copies:</label><input type="number" name="copies" class="form-control form-control-sm" value="1" min="1" style="width: 70px;"></div>
                    <div class="w-100"><input type="hidden" name="color" value="bw"><div class="option-btn-group" data-group-name="color"><button type="button" class="btn option-btn active" data-value="bw">N&B</button><button type="button" class="btn option-btn" data-value="color">Couleur</button></div></div>
                </div>
                <div class="mt-2 text-center"><a class="small text-decoration-none" data-bs-toggle="collapse" href="#"><i class="bi bi-gear"></i> Options avancées</a></div>
                <div class="collapse mt-2">
                    <div class="p-2 bg-white rounded">
                        <div class="mb-3"><label class="form-label small">Format</label><select name="papersize" class="form-select form-select-sm"><option value="2" selected>A4</option><option value="1">A3</option><option value="3">A5</option></select></div>
                        <div class="mb-3"><label class="form-label small">Impression</label><input type="hidden" name="siding" value="recto"><div class="option-btn-group" data-group-name="siding"><button type="button" class="btn option-btn active" data-value="recto">Recto</button><button type="button" class="btn option-btn" data-value="recto_verso">R/V</button></div></div>
                        <div><label class="form-label small">Plage</label><input type="hidden" name="pagemode" value="all"><div class="option-btn-group" data-group-name="pagemode"><button type="button" class="btn option-btn active" data-value="all">Tout</button><button type="button" class="btn option-btn" data-value="range">Plage</button></div><div class="d-flex align-items-center gap-2 mt-2 page-range-inputs d-none"><input type="number" name="startpage" class="form-control form-control-sm" placeholder="Début" min="1"><span class="text-muted">-</span><input type="number" name="endpage" class="form-control form-control-sm" placeholder="Fin" min="1"></div></div>
                    </div>
                </div>
            </div>
        </li>
    </template>

    <!-- Modale de confirmation -->
    <div class="modal fade" id="confirmModal" tabindex="-1"><div class="modal-dialog modal-dialog-centered modal-lg"><div class="modal-content">
        <div class="modal-header border-0"><h5 class="modal-title">Résumé de l'impression</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div>
        <div class="modal-body">
            <p class="text-center text-muted mb-4">Pour : <strong id="modal-client-name" class="text-dark"></strong></p>
            <div id="modal-task-list"></div>
            <div class="d-flex justify-content-between align-items-center bg-dark text-white p-3 rounded mt-3">
                <strong class="fs-5">PRIX TOTAL</strong><strong id="modal-total-price" class="fs-4"></strong>
            </div>
        </div>
        <div class="modal-footer border-0">
            <form id="modal-print-form" class="m-0 d-grid w-100"><button type="submit" class="btn btn-custom-submit">Imprimer</button></form>
        </div>
    </div></div></div>

    <!-- Overlay et Toasts -->
    <div id="loading-overlay"><div class="spinner-border"></div><h2 class="mt-3">Impression en cours...</h2><p class="text-muted">Veuillez patienter.</p></div>
    <div id="toast-container" class="toast-container position-fixed bottom-0 end-0 p-3"></div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
</body>
</html>
 
 
 
======================================================= 
FICHIER : templates\admin.html 
======================================================= 
 
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Panneau d'Administration</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <style>
        body { background-color: #f8f9fa; }
        .login-wrapper { display: flex; align-items: center; justify-content: center; min-height: 80vh; }
        .login-card { max-width: 400px; width: 100%; }
        .card.status-error { border-left: 5px solid var(--bs-danger); }
        .card.status-pending { border-left: 5px solid var(--bs-warning); }
        .btn-group .btn { display: flex; align-items: center; justify-content: center; }
        /* NOUVEAU: Style pour les options dans la modale */
        .reprint-option-group { display: flex; gap: 0.5rem; }
        .reprint-option-group .option-btn { flex-grow: 1; transition: all 0.2s ease-in-out; background-color: #fff; border: 1px solid #dee2e6; color: #212529; padding: 0.5rem; font-size: 0.9rem; border-radius: 0.25rem; }
        .reprint-option-group .option-btn.active { background-color: #212529; color: #fff; border-color: #212529; }
    </style>
</head>
<body>
    <div id="login-section" class="login-wrapper">
        <div class="card login-card shadow-sm">
            <div class="card-body p-4">
                <h1 class="card-title text-center mb-4">Espace Commerçant</h1>
                <div id="login-error" class="alert alert-danger d-none"></div>
                <form id="login-form">
                    <div class="mb-3"><label for="username" class="form-label">Identifiant</label><input type="text" class="form-control" id="username" name="username" required></div>
                    <div class="mb-3"><label for="password" class="form-label">Mot de passe</label><input type="password" class="form-control" id="password" name="password" required></div>
                    <div class="d-grid"><button type="submit" class="btn btn-dark">Connexion</button></div>
                </form>
                <div class="text-center mt-3"><a href="{{ url_for('index') }}" class="text-muted small">Retour</a></div>
            </div>
        </div>
    </div>

    <div id="admin-panel" class="d-none">
        <nav class="navbar navbar-expand-lg navbar-dark bg-dark sticky-top">
            <div class="container">
                <a class="navbar-brand" href="#"><i class="bi bi-shield-check"></i> Panneau Admin</a>
                <div class="ms-auto d-flex align-items-center">
                    <button id="delete-all-btn" class="btn btn-outline-danger btn-sm me-3" title="Effacer tout l'historique">
                        <i class="bi bi-trash3-fill"></i> Tout effacer
                    </button>
                    <button id="refresh-btn" class="btn btn-outline-secondary btn-sm me-3" title="Rafraîchir"><i class="bi bi-arrow-clockwise"></i></button>
                    <a href="{{ url_for('logout') }}" class="btn btn-outline-light btn-sm"><i class="bi bi-box-arrow-right"></i> Déconnexion</a>
                </div>
            </div>
        </nav>
        <div class="container mt-4">
            <div class="row mb-4">
                <div class="col-md-6 mb-3 mb-md-0">
                    <div class="card text-center h-100">
                        <div class="card-body">
                            <h5 class="card-title text-success">Revenu Total</h5>
                            <p id="total-revenue-display" class="card-text fs-2 fw-bold">0.00 €</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card text-center h-100">
                        <div class="card-body">
                            <h5 class="card-title text-primary">Pages Imprimées</h5>
                            <p id="total-pages-display" class="card-text fs-2 fw-bold">0</p>
                        </div>
                    </div>
                </div>
            </div>
            <!-- NOUVEAU: Barre d'action pour la sélection -->
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h2 class="mb-0">Historique des Commandes</h2>
                <button id="reprint-selection-btn" class="btn btn-primary" disabled>
                    <i class="bi bi-printer-fill"></i> Réimprimer la sélection (<span id="selection-count">0</span>)
                </button>
            </div>
            <div id="commands-container"></div>
        </div>
    </div>

    <div class="toast-container position-fixed bottom-0 end-0 p-3">
      <div id="reprintToast" class="toast align-items-center text-bg-success border-0">
          <div class="d-flex">
              <div class="toast-body">Réimpression lancée. Le statut sera mis à jour.</div>
              <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
          </div>
      </div>
    </div>

    <!-- NOUVEAU: Modale de réimpression par lot -->
    <div class="modal fade" id="reprint-modal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Réimprimer la sélection</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p>Vous allez réimprimer <strong id="reprint-modal-count"></strong> fichier(s). Veuillez définir les options communes :</p>
                    <form id="reprint-form">
                        <div class="mb-3">
                            <label class="form-label">Couleur</label>
                            <div class="reprint-option-group">
                                <button type="button" class="option-btn active" data-name="is_color" data-value="false">N&B</button>
                                <button type="button" class="option-btn" data-name="is_color" data-value="true">Couleur</button>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Recto/Verso</label>
                            <div class="reprint-option-group">
                                <button type="button" class="option-btn active" data-name="is_duplex" data-value="false">Recto</button>
                                <button type="button" class="option-btn" data-name="is_duplex" data-value="true">R/V</button>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="reprint-copies" class="form-label">Copies (par document)</label>
                            <input type="number" id="reprint-copies" class="form-control" value="1" min="1">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                    <button type="button" id="reprint-confirm-btn" class="btn btn-primary">Valider et Lancer la réimpression</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/admin.js') }}"></script>
    <script>const isUserLoggedIn = {{ is_logged_in|tojson }};</script>
</body>
</html>
 
 
